openapi: 3.0.3
info:
  title: Smart Pay Backend API
  description: |
    API compl√®te pour la gestion des paiements et des membres de Smart Pay.
    
    ## Fonctionnalit√©s principales :
    - üîê Authentification avec OTP
    - üë• Gestion des utilisateurs et entreprises
    - üë§ Gestion des membres avec champs personnalis√©s
    - üí∞ Demandes de rechargement de compte
    - üîç Recherche avanc√©e avec filtres
    
    ## R√¥les et permissions
    Voici la liste des r√¥les disponibles et leur fonctionnement :
    - **admin** : Acc√®s complet √† toutes les fonctionnalit√©s d'administration, gestion des utilisateurs, membres, paiements, etc.
    - **add** : Peut uniquement ajouter de nouveaux √©l√©ments (utilisateurs, membres, etc.), sans pouvoir modifier ou supprimer.
    - **delete_and_add_edit** : Peut ajouter, modifier et supprimer des √©l√©ments (sauf actions critiques li√©es aux paiements).
    - **init_paiement** : Peut initier une demande de paiement/rechargement, mais ne peut pas la confirmer ou la v√©rifier.
    - **confirm_paiement** : Peut confirmer une demande de paiement/rechargement initi√©e par un autre utilisateur.
    - **verify_paiement** : Peut v√©rifier et valider qu'un paiement a bien √©t√© effectu√© (contr√¥le final).
    - **user** : Acc√®s limit√© √† ses propres informations et actions autoris√©es par l'entreprise.
    - **super_admin** : Acc√®s total √† toutes les fonctionnalit√©s, y compris la gestion des r√¥les et des permissions.
    
    Chaque r√¥le permet de contr√¥ler pr√©cis√©ment les droits d'acc√®s et d'action dans le syst√®me.
    
    ## Authentification
    L'API utilise JWT pour l'authentification. Incluez le token dans le header :
    ```
    Authorization: Bearer <votre_token>
    ```
    
    ## Codes de statut
    - `200` : Succ√®s
    - `201` : Cr√©√© avec succ√®s
    - `400` : Donn√©es invalides
    - `401` : Non autoris√©
    - `404` : Ressource non trouv√©e
    - `500` : Erreur serveur
  version: 1.0.0
  contact:
    name: Smart Pay Support
    email: support@smartpay.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Serveur de d√©veloppement
  - url: https://api.smartpay.com/api
    description: Serveur de production

tags:
  - name: Authentication
    description: Endpoints d'authentification et gestion des comptes
  - name: Users
    description: Gestion des utilisateurs
  - name: Members
    description: Gestion des membres avec champs personnalis√©s
  - name: Recharge Requests
    description: Gestion des demandes de rechargement de compte
  - name: Documentation
    description: Documentation de l'API

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token d'authentification

  schemas:
    # Sch√©mas d'authentification
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Email de l'utilisateur
          example: "user@example.com"
        password:
          type: string
          minLength: 6
          description: Mot de passe de l'utilisateur
          example: "password123"

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Connexion r√©ussie"
        data:
          type: object
          properties:
            token:
              type: string
              description: Token JWT temporaire (30 minutes)
            user:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                username:
                  type: string
                  example: "john_doe"
                role:
                  type: string
                  enum: [user, admin, super_admin, add, delete_and_add_edit, init_paiement, confirm_paiement, verify_paiement]
                  example: "admin"
                company:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: "Smart Pay Corp"
                is_first_login:
                  type: boolean
                  example: false
            requiresOTP:
              type: boolean
              description: Indique si l'OTP est requis
              example: true

    OTPVerificationRequest:
      type: object
      required:
        - otp
      properties:
        otp:
          type: string
          minLength: 6
          maxLength: 6
          description: Code OTP √† 6 chiffres
          example: "123456"

    ChangePasswordRequest:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
          minLength: 6
          description: Mot de passe actuel
        new_password:
          type: string
          minLength: 6
          description: Nouveau mot de passe

    # Sch√©mas utilisateurs
    CreateUserRequest:
      type: object
      required:
        - first_name
        - last_name
        - email
        - role
      properties:
        first_name:
          type: string
          minLength: 2
          maxLength: 50
          example: "John"
        last_name:
          type: string
          minLength: 2
          maxLength: 50
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        username:
          type: string
          minLength: 3
          maxLength: 30
          example: "john_doe"
        role:
          type: string
          enum: [user, admin, super_admin, add, delete_and_add_edit, init_paiement, confirm_paiement, verify_paiement]
          example: "admin"
        phone:
          type: string
          example: "+2250123456789"

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        username:
          type: string
          example: "john_doe"
        role:
          type: string
          example: "admin"
        phone:
          type: string
          example: "+2250123456789"
        is_active:
          type: boolean
          example: true
        companyId:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Sch√©mas membres
    CreateMemberRequest:
      type: object
      required:
        - first_name
        - last_name
        - paiement_methode
        - paiement_identicator
        - town
      properties:
        first_name:
          type: string
          minLength: 2
          maxLength: 50
          example: "Alice"
        last_name:
          type: string
          minLength: 2
          maxLength: 50
          example: "Johnson"
        email:
          type: string
          format: email
          example: "alice.johnson@example.com"
        phone:
          type: string
          example: "+2250123456789"
        paiement_methode:
          type: string
          enum: [kulu, orange_money, soutra_money, mobile_money]
          example: "orange_money"
        paiement_identicator:
          type: string
          minLength: 1
          maxLength: 100
          example: "0123456789"
        montant_paiement:
          type: integer
          minimum: 0
          example: 50000
        town:
          type: string
          minLength: 2
          maxLength: 100
          example: "Abidjan"
        custom_attributes:
          type: object
          description: Champs personnalis√©s (exactement 2 champs)
          example:
            numero_retraite: "123456789"
            code_agence: "AG001"

    UpdateMemberRequest:
      type: object
      properties:
        first_name:
          type: string
          minLength: 2
          maxLength: 50
        last_name:
          type: string
          minLength: 2
          maxLength: 50
        email:
          type: string
          format: email
        phone:
          type: string
        paiement_methode:
          type: string
          enum: [kulu, orange_money, soutra_money, mobile_money]
        paiement_identicator:
          type: string
          minLength: 1
          maxLength: 100
        montant_paiement:
          type: integer
          minimum: 0
        town:
          type: string
          minLength: 2
          maxLength: 100
        custom_attributes:
          type: object
          description: Champs personnalis√©s (exactement 2 champs)
        is_active:
          type: boolean

    MemberResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "Alice"
        last_name:
          type: string
          example: "Johnson"
        email:
          type: string
          format: email
          example: "alice.johnson@example.com"
        phone:
          type: string
          example: "+2250123456789"
        paiement_methode:
          type: string
          example: "orange_money"
        paiement_identicator:
          type: string
          example: "0123456789"
        montant_paiement:
          type: integer
          example: 50000
        town:
          type: string
          example: "Abidjan"
        custom_attributes:
          type: object
          example:
            numero_retraite: "123456789"
            code_agence: "AG001"
        is_active:
          type: boolean
          example: true
        companyId:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Sch√©mas demandes de rechargement
    CreateRechargeRequestRequest:
      type: object
      required:
        - amount
      properties:
        amount:
          type: integer
          minimum: 1000
          maximum: 1000000000
          description: Montant en FCFA
          example: 100000
        reason:
          type: string
          maxLength: 500
          description: Raison de la demande
          example: "Rechargement pour paiements de membres"
        paymentMethod:
          type: string
          enum: [bank_transfer, mobile_money, cash, check, other]
          example: "bank_transfer"
        paymentReference:
          type: string
          maxLength: 100
          description: R√©f√©rence du paiement
          example: "REF123456"
        attachmentUrl:
          type: string
          format: uri
          description: URL de la pi√®ce jointe
          example: "https://example.com/attachment.pdf"
        notes:
          type: string
          maxLength: 1000
          description: Notes suppl√©mentaires
          example: "Demande urgente pour fin de mois"
        isUrgent:
          type: boolean
          default: false
          example: true
        priority:
          type: string
          enum: [low, normal, high, urgent]
          default: normal
          example: "high"

    RechargeRequestResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        amount:
          type: integer
          example: 100000
        reason:
          type: string
          example: "Rechargement pour paiements de membres"
        status:
          type: string
          enum: [pending, approved, rejected, cancelled]
          example: "pending"
        paymentMethod:
          type: string
          example: "bank_transfer"
        paymentReference:
          type: string
          example: "REF123456"
        attachmentUrl:
          type: string
          example: "https://example.com/attachment.pdf"
        notes:
          type: string
          example: "Demande urgente pour fin de mois"
        isUrgent:
          type: boolean
          example: true
        priority:
          type: string
          example: "high"
        processedBy:
          type: integer
          nullable: true
          example: 2
        processedAt:
          type: string
          format: date-time
          nullable: true
        rejectionReason:
          type: string
          nullable: true
        companyId:
          type: integer
          example: 1
        requestedById:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Sch√©mas de pagination
    PaginationInfo:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 5
        totalItems:
          type: integer
          example: 100
        itemsPerPage:
          type: integer
          example: 20
        hasNextPage:
          type: boolean
          example: true
        hasPrevPage:
          type: boolean
          example: false
        nextPage:
          type: integer
          nullable: true
          example: 2
        prevPage:
          type: integer
          nullable: true
          example: null

    # Sch√©mas de r√©ponse g√©n√©rique
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Op√©ration r√©ussie"
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Erreur de validation"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Email invalide"

paths:
  # ========================================
  # DOCUMENTATION
  # ========================================
  
  /docs:
    get:
      tags:
        - Documentation
      summary: Documentation de l'API
      description: |
        Interface Redoc pour consulter la documentation compl√®te de l'API.
        Cette route sert une interface web interactive avec tous les endpoints.
      responses:
        '200':
          description: Interface de documentation HTML
          content:
            text/html:
              schema:
                type: string
        '404':
          description: Documentation non trouv√©e
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /docs/spec:
    get:
      tags:
        - Documentation
      summary: Sp√©cification OpenAPI
      description: Retourne le fichier de sp√©cification OpenAPI au format YAML
      responses:
        '200':
          description: Sp√©cification OpenAPI
          content:
            application/yaml:
              schema:
                type: string
        '404':
          description: Sp√©cification non trouv√©e
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /docs/info:
    get:
      tags:
        - Documentation
      summary: Informations de l'API
      description: Retourne les informations g√©n√©rales de l'API
      responses:
        '200':
          description: Informations de l'API
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Documentation API Smart Pay Backend"
                  data:
                    type: object
                    properties:
                      title:
                        type: string
                        example: "Smart Pay Backend API"
                      version:
                        type: string
                        example: "1.0.0"
                      description:
                        type: string
                        example: "API compl√®te pour la gestion des paiements et des membres"
                      endpoints:
                        type: object
                        properties:
                          auth:
                            type: string
                            example: "/api/auth"
                          users:
                            type: string
                            example: "/api/users"
                          members:
                            type: string
                            example: "/api/members"
                          rechargeRequests:
                            type: string
                            example: "/api/recharge-requests"
                          documentation:
                            type: string
                            example: "/api/docs"
                      features:
                        type: array
                        items:
                          type: string
                        example:
                          - "üîê Authentification avec OTP"
                          - "üë• Gestion des utilisateurs et entreprises"
                          - "üë§ Gestion des membres avec champs personnalis√©s"
                          - "üí∞ Demandes de rechargement de compte"
                          - "üîç Recherche avanc√©e avec filtres"

  # ========================================
  # AUTHENTIFICATION
  # ========================================
  
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Connexion utilisateur
      description: |
        Authentifie un utilisateur avec email/mot de passe.
        G√©n√®re un token temporaire et envoie un OTP par email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Connexion r√©ussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Donn√©es invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Email ou mot de passe incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify-otp:
    post:
      tags:
        - Authentication
      summary: V√©rification OTP
      description: V√©rifie le code OTP et g√©n√®re un token final
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPVerificationRequest'
      responses:
        '200':
          description: OTP v√©rifi√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "OTP v√©rifi√© avec succ√®s"
                  token:
                    type: string
                    description: Token JWT final
        '401':
          description: OTP invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Changer le mot de passe
      description: Change le mot de passe de l'utilisateur connect√©
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Mot de passe chang√© avec succ√®s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Donn√©es invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Mot de passe actuel incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ========================================
  # UTILISATEURS
  # ========================================

  /users/me:
    get:
      tags:
        - Users
      summary: Obtenir les informations de l'utilisateur connect√©
      description: R√©cup√®re les informations de l'utilisateur actuellement connect√©
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Informations utilisateur r√©cup√©r√©es
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Non autoris√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      summary: Lister les utilisateurs
      description: R√©cup√®re la liste des utilisateurs de l'entreprise
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Num√©ro de page
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Nombre d'√©l√©ments par page
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          description: Terme de recherche
          schema:
            type: string
      responses:
        '200':
          description: Liste des utilisateurs
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Utilisateurs r√©cup√©r√©s avec succ√®s"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'

    post:
      tags:
        - Users
      summary: Cr√©er un utilisateur
      description: Cr√©e un nouvel utilisateur avec mot de passe temporaire
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Utilisateur cr√©√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Utilisateur cr√©√© avec succ√®s"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserResponse'
                      emailSent:
                        type: boolean
                        example: true
                      emailMessage:
                        type: string
                        example: "Email envoy√© avec succ√®s"
                      temporaryPassword:
                        type: string
                        description: Mot de passe temporaire g√©n√©r√©

  /users/{id}:
    put:
      tags:
        - Users
      summary: Mettre √† jour un utilisateur
      description: Met √† jour les informations d'un utilisateur
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de l'utilisateur
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: Utilisateur mis √† jour avec succ√®s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /users/{id}/disable:
    put:
      tags:
        - Users
      summary: D√©sactiver un utilisateur
      description: D√©sactive un utilisateur
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de l'utilisateur
          schema:
            type: integer
      responses:
        '200':
          description: Utilisateur d√©sactiv√© avec succ√®s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /users/{id}/enable:
    put:
      tags:
        - Users
      summary: Activer un utilisateur
      description: Active un utilisateur
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de l'utilisateur
          schema:
            type: integer
      responses:
        '200':
          description: Utilisateur activ√© avec succ√®s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # ========================================
  # MEMBRES
  # ========================================

  /members:
    get:
      tags:
        - Members
      summary: Lister les membres
      description: |
        R√©cup√®re la liste des membres de l'entreprise avec pagination et filtres.
        La recherche inclut les champs personnalis√©s.
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Num√©ro de page
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Nombre d'√©l√©ments par page
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          description: Terme de recherche (nom, pr√©nom, email, t√©l√©phone, champs personnalis√©s)
          schema:
            type: string
        - name: is_active
          in: query
          description: Filtrer par statut actif
          schema:
            type: boolean
        - name: paiement_methode
          in: query
          description: Filtrer par m√©thode de paiement
          schema:
            type: string
            enum: [kulu, orange_money, soutra_money, mobile_money]
      responses:
        '200':
          description: Liste des membres
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Membres r√©cup√©r√©s avec succ√®s"
                  data:
                    type: object
                    properties:
                      members:
                        type: array
                        items:
                          $ref: '#/components/schemas/MemberResponse'
                      pagination:
                        $ref: '#/components/schemas/PaginationInfo'
                      filters:
                        type: object
                        properties:
                          search:
                            type: string
                          is_active:
                            type: boolean
                          paiement_methode:
                            type: string
                      company:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string

    post:
      tags:
        - Members
      summary: Cr√©er un membre
      description: Cr√©e un nouveau membre avec champs personnalis√©s
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMemberRequest'
      responses:
        '201':
          description: Membre cr√©√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Membre cr√©√© avec succ√®s"
                  data:
                    $ref: '#/components/schemas/MemberResponse'

  /members/{id}:
    put:
      tags:
        - Members
      summary: Mettre √† jour un membre
      description: Met √† jour les informations d'un membre
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID du membre
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberRequest'
      responses:
        '200':
          description: Membre mis √† jour avec succ√®s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /members/search/advanced:
    get:
      tags:
        - Members
      summary: Recherche avanc√©e de membres
      description: |
        Recherche avanc√©e avec filtres sp√©cifiques sur les champs personnalis√©s.
        Permet de rechercher par nom de champ personnalis√© et valeur exacte.
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Num√©ro de page
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Nombre d'√©l√©ments par page
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          description: Terme de recherche g√©n√©ral
          schema:
            type: string
        - name: customFieldName
          in: query
          description: Nom du champ personnalis√© sp√©cifique
          schema:
            type: string
            example: "numero_retraite"
        - name: customFieldValue
          in: query
          description: Valeur exacte du champ personnalis√©
          schema:
            type: string
            example: "123456789"
        - name: is_active
          in: query
          description: Filtrer par statut actif
          schema:
            type: boolean
        - name: paiement_methode
          in: query
          description: Filtrer par m√©thode de paiement
          schema:
            type: string
            enum: [kulu, orange_money, soutra_money, mobile_money]
      responses:
        '200':
          description: Recherche avanc√©e termin√©e
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Recherche avanc√©e termin√©e"
                  data:
                    type: object
                    properties:
                      members:
                        type: array
                        items:
                          $ref: '#/components/schemas/MemberResponse'
                      pagination:
                        $ref: '#/components/schemas/PaginationInfo'
                      filters:
                        type: object
                        properties:
                          search:
                            type: string
                          customFieldName:
                            type: string
                          customFieldValue:
                            type: string
                          is_active:
                            type: boolean
                          paiement_methode:
                            type: string
                      company:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string

  # ========================================
  # DEMANDES DE RECHARGEMENT
  # ========================================

  /recharge-requests:
    get:
      tags:
        - Recharge Requests
      summary: Lister les demandes de rechargement
      description: R√©cup√®re la liste des demandes de rechargement avec pagination et filtres
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Num√©ro de page
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Nombre d'√©l√©ments par page
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: Filtrer par statut
          schema:
            type: string
            enum: [pending, approved, rejected, cancelled]
        - name: priority
          in: query
          description: Filtrer par priorit√©
          schema:
            type: string
            enum: [low, normal, high, urgent]
        - name: isUrgent
          in: query
          description: Filtrer les demandes urgentes
          schema:
            type: boolean
        - name: startDate
          in: query
          description: Date de d√©but (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Date de fin (YYYY-MM-DD)
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Liste des demandes de rechargement
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Demandes de rechargement r√©cup√©r√©es avec succ√®s"
                  data:
                    type: object
                    properties:
                      requests:
                        type: array
                        items:
                          $ref: '#/components/schemas/RechargeRequestResponse'
                      pagination:
                        $ref: '#/components/schemas/PaginationInfo'
                      filters:
                        type: object
                        properties:
                          status:
                            type: string
                          priority:
                            type: string
                          isUrgent:
                            type: boolean
                          startDate:
                            type: string
                          endDate:
                            type: string

    post:
      tags:
        - Recharge Requests
      summary: Cr√©er une demande de rechargement
      description: Cr√©e une nouvelle demande de rechargement de compte
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRechargeRequestRequest'
      responses:
        '201':
          description: Demande de rechargement cr√©√©e avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Demande de rechargement cr√©√©e avec succ√®s"
                  data:
                    $ref: '#/components/schemas/RechargeRequestResponse'

  /recharge-requests/{id}:
    get:
      tags:
        - Recharge Requests
      summary: Obtenir une demande de rechargement
      description: R√©cup√®re les d√©tails d'une demande de rechargement sp√©cifique
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la demande de rechargement
          schema:
            type: integer
      responses:
        '200':
          description: D√©tails de la demande de rechargement
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Demande de rechargement r√©cup√©r√©e avec succ√®s"
                  data:
                    $ref: '#/components/schemas/RechargeRequestResponse'

  /recharge-requests/{id}/approve:
    put:
      tags:
        - Recharge Requests
      summary: Approuver une demande de rechargement
      description: Approuve une demande de rechargement (admin seulement)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la demande de rechargement
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                notes:
                  type: string
                  maxLength: 1000
                  description: Notes d'approbation
      responses:
        '200':
          description: Demande approuv√©e avec succ√®s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /recharge-requests/{id}/reject:
    put:
      tags:
        - Recharge Requests
      summary: Rejeter une demande de rechargement
      description: Rejette une demande de rechargement (admin seulement)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la demande de rechargement
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rejectionReason:
                  type: string
                  minLength: 10
                  maxLength: 500
                  description: Raison du rejet
                notes:
                  type: string
                  maxLength: 1000
                  description: Notes suppl√©mentaires
      responses:
        '200':
          description: Demande rejet√©e avec succ√®s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /recharge-requests/{id}/cancel:
    put:
      tags:
        - Recharge Requests
      summary: Annuler une demande de rechargement
      description: Annule une demande de rechargement (demandeur ou admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la demande de rechargement
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                notes:
                  type: string
                  maxLength: 1000
                  description: Raison de l'annulation
      responses:
        '200':
          description: Demande annul√©e avec succ√®s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /recharge-requests/stats/overview:
    get:
      tags:
        - Recharge Requests
      summary: Statistiques des demandes de rechargement
      description: R√©cup√®re les statistiques globales des demandes de rechargement
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Statistiques r√©cup√©r√©es avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Statistiques r√©cup√©r√©es avec succ√®s"
                  data:
                    type: object
                    properties:
                      overview:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 100
                          pending:
                            type: integer
                            example: 25
                          approved:
                            type: integer
                            example: 60
                          rejected:
                            type: integer
                            example: 10
                          cancelled:
                            type: integer
                            example: 5
                      amounts:
                        type: object
                        properties:
                          totalApproved:
                            type: integer
                            example: 50000000
                          totalPending:
                            type: integer
                            example: 10000000
                      urgent:
                        type: object
                        properties:
                          count:
                            type: integer
                            example: 5 